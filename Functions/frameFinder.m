% -------------------------------------------------------------------------
% frameFinder.m
% 
% This function returns an array with frames of the first pressure sample,
% and heel strike/toe off event frames when called with a folder
% containing only analog and force .tsv files exported from QTM. The
% returned data is used for synchronizing and postprocesing collected data.
% 
% 
% Written by Andrew Kennedy LaPre'
% May 2016
%
%
% resultant array frames: [novel pulse, HS1, TO1, HS2, TO2, HS3]
%
% novel pulse is generated by a wireless triggor from the novel pliance
% pressure system and is used to synchronize the two systems
% 
% example function call:
% data_folder = [pwd '\TSV\Passive\GRF-Analog\'];
% frames.passive = frameFinder(data_folder);
% % manually fix some frames base on visual inspection
% frames.passive(1,3) = 20750; % frames for 1 of 3 cases 
% -------------------------------------------------------------------------


function frames = frameFinder(data_folder)

analog_files = dir(fullfile(data_folder, '*a.tsv'));
f1_files = dir(fullfile(data_folder, '*f_1.tsv'));
f2_files = dir(fullfile(data_folder, '*f_2.tsv'));
f3_files = dir(fullfile(data_folder, '*f_3.tsv'));

nTrials = size(analog_files,1);
pathname = data_folder;

frames = zeros(nTrials,6);


for trial = 1:nTrials;

%     errorFlag = 0;
    % get frame pressure starts recording
    try
        % Get the name of the file for this trial
        file_input = analog_files(trial).name;
        name1 = regexprep(file_input,'_a.tsv','');
        % load analog data
        data = dlmread(strcat(pathname,file_input),'',13,0);
        analog64 = data(:,64);
        % search for pulse in channel 64
        for t = 1:size(analog64,1)
           if analog64(t)>.2 
               break
           end
        end
    catch
        t = 1;
        name1 = '';
    end
    x=t;
    if t>1
        x=t-2;
    end


    % store Novel Pulse frame
    frames(trial,1) = x;

    % get first heel strike frame
    % load forceplate 2 data
    file_input = f2_files(trial).name;
    name2 = regexprep(file_input,'_f_2.tsv','');
    try
        data = dlmread(strcat(pathname,file_input),'',23,0);
    catch
        data = dlmread(strcat(pathname,file_input),'',24,0);
    end
    % FP2 vertical GRF
    fp2_data = data(:,3);
    % zero data
    fp2_data = fp2_data-fp2_data(1);
    % filter the data
    windowSize = 10;
    b = (1/windowSize)*ones(1,windowSize);
    a = 1;
    fp2_data = filter(b,a,fp2_data);
    for t = 1:size(data,1)
        if fp2_data(t)>5 
            break
            
        end
    end
    HS1=t;
    if t>10
        HS1=t-10;
    end
    
    
    % store HS 1 frame
    frames(trial,2) = HS1;


    % get HS 2 and HS 3 frames
    % load forceplate 1 data
    file_input = f1_files(trial).name;
    name3 = regexprep(file_input,'_f_1.tsv','');    
    try
        data = dlmread(strcat(pathname,file_input),'',23,0);
    catch
        data = dlmread(strcat(pathname,file_input),'',24,0);
    end
    % FP1 vertical GRF
    fp1_data = data(:,3);
    % zero the data
    fp1_data = fp1_data-fp1_data(1);
    % filter the data
    windowSize = 10;
    b = (1/windowSize)*ones(1,windowSize);
    a = 1;
    fp1_data = filter(b,a,fp1_data);
    % FP1 center of pressure
    cop_sag = data(:,8);
    % filter the data
    windowSize = 10;
    b = (1/windowSize)*ones(1,windowSize);
    a = 1;
    copFilt = filter(b,a,cop_sag);
    cop_sag_dot = diff(copFilt);
    % filter the data
    windowSize = 10;
    b = (1/windowSize)*ones(1,windowSize);
    a = 1;
    temp = filter(b,a,cop_sag_dot);
    
    figure
    subplot(2,1,1)
    hold on
    plot (cop_sag,'r')
    plot(copFilt,'b')
    xlim([HS1 HS1+5000])
    ylim([-500 500])
    title('FP1 Sagittal COP')
    subplot(2,1,2)
    hold on
    plot(cop_sag_dot,'r')
    plot(temp,'b')
    xlim([HS1 HS1+5000])
    ylim([-5 5])
    title('FP1 Sagittal COP_dot')
    xlabel('frame')
    
    contact_flag = 0;
%     HS_flag = 0;
    for t = HS1:size(temp,1) 
        if contact_flag == 0 && fp1_data(t,1) > 5 
            % store HS 2 frame
            frames(trial,4) = t-10;  
            contact_flag = 1;
        end
        if fp1_data(t,1) > 500 && temp(t)>1
            break
        end
    end
    if t == size(temp,1)
        warning([file_input ' 3rd heel strike needs manual input, inspect plot. You may need to inspect the original data in QTM.'])
    end
    if t>1 && t<(size(temp,1)-10) % search until the last ten frames
        % store HS 3 frame
        frames(trial,6) = t + 10;
    else
        % store HS 3 frame
        frames(trial,6) = t;
    end   
    
    
    
    % get first toe off frame
    % load forceplate 3 data
    file_input = f3_files(trial).name;
    name4 = regexprep(file_input,'_f_3.tsv','');
    try
        data = dlmread(strcat(pathname,file_input),'',23,0);
    catch
        data = dlmread(strcat(pathname,file_input),'',24,0);
    end
    fp3_data = data(:,3);
    % zero data
    fp3_data = fp3_data-fp3_data(1);
    % filter the data
    windowSize = 10;
    b = (1/windowSize)*ones(1,windowSize);
    a = 1;
    fp3_data = filter(b,a,fp3_data);
    for t = HS1:size(data,1)
        if fp3_data(t)<5 
            break
        end
    end
    x=t;
    if t>1
        x=t+10;
    end
    frames(trial,3) = x;
    
    % get second toe off frame
    % load forceplate 2 data
    file_input = f2_files(trial).name;
    name5 = regexprep(file_input,'_f_2.tsv','');
    try
        data = dlmread(strcat(pathname,file_input),'',23,0);
    catch
        data = dlmread(strcat(pathname,file_input),'',24,0);
    end
    fp2_data = data(:,3);
    % zero data
    fp2_data = fp2_data-fp2_data(end);
    % filter the data
    windowSize = 10;
    b = (1/windowSize)*ones(1,windowSize);
    a = 1;
    fp2_data = filter(b,a,fp2_data);
    for t = frames(trial,2)+100:size(data,1)
        if fp2_data(t)<5 
            break
        end
    end
    x=t;
    if t>1
        x=t+10;
    end
    
    % store TO 2 frame
    frames(trial,5) = x;   
    
    
    
    
    
    
    
    figure
    subplot(4,1,1)
    hold on
    try
        plot(analog64)
        plot(frames(trial,1),analog64(frames(trial,1)),'*r')
    %     xlim([frames(trial,1)-100 frames(trial,1)+100])
        ylabel('ch64 pulse')
    catch
        ylabel('no analog data')
    end
    title(name1 )
    
    subplot(4,1,2)
    hold on
    plot(fp3_data)
    plot(frames(trial,3),fp3_data(frames(trial,3)),'*r')
    try
        xlim([frames(trial,2)-10 frames(trial,6)+10])
    catch
%         xlim([frames(trial,2) frames(trial,6)])
    end
    ylim([-10 max(fp3_data)+100])
    ylabel(' FP3 ')
    
    subplot(4,1,3)
    hold on
    plot(fp2_data)
    plot(frames(trial,2),fp2_data(frames(trial,2)),'*r')
    plot(frames(trial,5),fp2_data(frames(trial,5)),'*r')
    try
        xlim([frames(trial,2)-10 frames(trial,6)+10])
    catch
%         xlim([frames(trial,2) frames(trial,6)])
    end
    ylim([-10 max(fp2_data)+100])
    ylabel(' FP2 ')
    
    subplot(4,1,4)
    hold on
    plot(fp1_data)
    plot(frames(trial,4),fp1_data(frames(trial,4)),'*r')
    plot(frames(trial,6),fp1_data(frames(trial,6)),'*r')
    try
        xlim([frames(trial,2)-10 frames(trial,6)+10])
    catch
%         xlim([frames(trial,2) frames(trial,6)])
    end
    ylim([-10 max(fp1_data)+100])
%     ylabel([name3 ' FP1 '])
    ylabel(' FP1 ')
    
end